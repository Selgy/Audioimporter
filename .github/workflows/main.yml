name: ZXP Release

on:
  push:
    branches:
      - main
    tags:
      - 'v1.0.0'

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      - name: Locate and make ZXPSignCmd executable
        run: |
          find . -name "ZXPSignCmd" -type f -print
          ZXP_CMD=$(find . -name "ZXPSignCmd" -type f | head -n 1)
          if [ -n "$ZXP_CMD" ]; then
            chmod +x "$ZXP_CMD"
            echo "Made $ZXP_CMD executable"
          else
            echo "ZXPSignCmd not found"
            exit 1
          fi

      - name: Decode Signing Certificate
        env:
          SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
        run: |
          mkdir -p ./certificates
          echo "$SIGNING_CERTIFICATE_BASE64" | base64 --decode > ./certificates/signing_certificate.p12
          if [ $? -eq 0 ]; then
            echo "Certificate decoded successfully"
          else
            echo "Failed to decode certificate"
            exit 1
          fi

      - name: Sign macOS binary
        env:
            APPLE_DEVELOPER_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
            APPLE_DEVELOPER_CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
            echo $APPLE_DEVELOPER_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
            security create-keychain -p "" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security import certificate.p12 -k build.keychain -P $APPLE_DEVELOPER_CERTIFICATE_PASSWORD -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
            codesign --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime --timestamp --force --verbose=4 ./disp/target/release/audio_importer
  



      - name: Build ZXP Package
        run: |
          npm run zxp
          if [ $? -eq 0 ]; then
            echo "ZXP package built successfully"
          else
            echo "Failed to build ZXP package"
            exit 1
          fi

      - name: Verify ZXP file
        run: |
          if [ -f "./dist/zxp/com.AudioImporterV2.cep.zxp" ]; then
            echo "ZXP file exists"
          else
            echo "ZXP file not found"
            exit 1
          fi





      - name: Notarize ZXP Package
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Zip the ZXP file for notarization
          ditto -c -k --keepParent ./dist/zxp/com.AudioImporterV2.cep.zxp ./dist/zxp/com.AudioImporterV2.cep.zxp.zip
          
          # Submit for notarization and capture the entire output
          NOTARY_SUBMIT_OUTPUT=$(xcrun notarytool submit ./dist/zxp/com.AudioImporterV2.cep.zxp.zip --wait --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID")
          echo "Notary submit output:"
          echo "$NOTARY_SUBMIT_OUTPUT"
          
          # Extract the submission ID using a more robust method
          SUBMISSION_ID=$(echo "$NOTARY_SUBMIT_OUTPUT" | grep "id:" | tail -n1 | awk '{print $NF}' | tr -d '[:space:]')
          
          if [ -z "$SUBMISSION_ID" ]; then
            echo "Failed to extract submission ID"
            exit 1
          fi
          
          echo "Extracted Submission ID: $SUBMISSION_ID"
          
          # Check notarization status and get logs
          xcrun notarytool log "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID"
          
          # Check if notarization was successful
          NOTARIZATION_INFO=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID")
          echo "Notarization Info:"
          echo "$NOTARIZATION_INFO"
          
          NOTARIZATION_STATUS=$(echo "$NOTARIZATION_INFO" | grep "status:" | awk '{print $2}')
          
          if [ "$NOTARIZATION_STATUS" != "Accepted" ]; then
            echo "Notarization failed with status: $NOTARIZATION_STATUS"
            exit 1
          fi
          
          echo "Notarization completed successfully"
          
          # Note: Skipping stapling step for ZXP files




      - name: Create Tag if Not Exists
        run: |
            if ! git rev-parse v1.0.0 >/dev/null 2>&1; then
              git config user.name github-actions
              git config user.email github-actions@github.com
              git tag v1.0.0
              git push origin v1.0.0
            fi
  
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
            files: ./dist/zxp/com.AudioImporterV2.cep.zxp
            tag_name: v1.0.0
            draft: false
            prerelease: false